{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BigQuery table",
      "cell_execution_strategy": "setup",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Código principal, proveniente de ML_28\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from google.cloud import bigquery\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Inicializar cliente BigQuery\n",
        "client = bigquery.Client()\n",
        "\n",
        "# Cargar datos desde BigQuery\n",
        "query = \"SELECT * FROM `pf-henry-404414.data_machine_learning.wb_data_machine_learning_bis`\"\n",
        "data_original = client.query(query).to_dataframe()\n",
        "data = data_original.copy()\n",
        "\n",
        "# Preprocesamiento: One-Hot Encoding para 'Pais'\n",
        "data = pd.get_dummies(data, columns=['Pais'])\n",
        "\n",
        "# Obtener la lista de todos los países únicos\n",
        "all_countries = data_original['Pais'].unique()\n",
        "\n",
        "\n",
        "# Lista de columnas numéricas (sin incluir la variable objetivo)\n",
        "numeric_columns = [\n",
        "    'Tasa_Natalidad', 'Emisiones_CO2', 'Educacion_obligatoria_en_anios',\n",
        "    'gasto_salud_per_capita_ppp', 'Tasa_Mortalidad', 'Gasto_Salud_Gobierno',\n",
        "    'gasto_salud_gobierno_per_capita_ppp', 'gasto_salud_privado_pct_gasto_salud_actual',\n",
        "    'logro_educativo_secundaria_inferior_pct_poblacion_25_anios_mas', 'PIB_per_capita',\n",
        "    'indice_gini', 'gasto_educacion_gobierno_pct_pib', 'Esperanza_vida_femenina',\n",
        "    'Tasa_alfabetizacion_adultos', 'tasa_mortalidad_lesiones_trafico',\n",
        "    'mortalidad_por___enfermedades_cardiovasculares_cancer_diabetes_enf_respiratorias_pct',\n",
        "    'Mortalidad_adulta_femenina', 'Mortalidad_adulta_masculina', 'Mortalidad_infantil',\n",
        "    'contaminacion_pct_poblacion_excede_oms', 'personas_saneamiento_basico_pct_poblacion',\n",
        "    'Acceso_agua_potable', 'estabilidad_politica', 'brecha_pobreza_2_15_dolars_a_day',\n",
        "    'prevalencia_desnutricion_pct_poblacion', 'Poblacion_rural', 'desempleo_total_ilo',\n",
        "    'poblacion_urbana'\n",
        "]\n",
        "\n",
        "# Define la lista de indicadores excluyendo la variable objetivo y asegurándote de que no incluya columnas no numéricas\n",
        "indicators = [col for col in numeric_columns if col != 'Esperanza_vida_total']\n",
        "\n",
        "\n",
        "# Separar variables predictoras y objetivo\n",
        "X = data[numeric_columns]\n",
        "y = data['Esperanza_vida_total']\n",
        "\n",
        "# Normalización de variables numéricas\n",
        "scaler = MinMaxScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Aplicación de PCA\n",
        "pca = PCA(n_components=0.95)\n",
        "X_pca = pca.fit_transform(X_scaled)\n",
        "\n",
        "# División en entrenamiento y prueba\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Entrenar y evaluar Random Forest\n",
        "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "rf_pred = rf.predict(X_test)\n",
        "\n",
        "# Entrenar y evaluar Perceptrón Multicapa (Red Neuronal)\n",
        "nn = MLPRegressor(random_state=42)\n",
        "nn.fit(X_train, y_train)\n",
        "nn_pred = nn.predict(X_test)\n",
        "\n",
        "# Entrenar y evaluar Regresión Lineal\n",
        "lr = LinearRegression()\n",
        "lr.fit(X_train, y_train)\n",
        "lr_pred = lr.predict(X_test)\n",
        "\n",
        "# Comparar métricas\n",
        "print(\"Random Forest MSE:\", mean_squared_error(y_test, rf_pred))\n",
        "print(\"Random Forest R2:\", r2_score(y_test, rf_pred))\n",
        "print(\"Red Neuronal MSE:\", mean_squared_error(y_test, nn_pred))\n",
        "print(\"Red Neuronal R2:\", r2_score(y_test, nn_pred))\n",
        "print(\"Regresión Lineal MSE:\", mean_squared_error(y_test, lr_pred))\n",
        "print(\"Regresión Lineal R2:\", r2_score(y_test, lr_pred))\n",
        "\n",
        "# Validación cruzada y ajuste de hiperparámetros para Random Forest\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_depth': [10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "grid_search = GridSearchCV(estimator=RandomForestRegressor(random_state=42), param_grid=param_grid, cv=5, n_jobs=-1, scoring='neg_mean_squared_error', verbose=2)\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Reentrenamiento con la mejor configuración\n",
        "rf_optimized = RandomForestRegressor(\n",
        "    n_estimators=grid_search.best_params_['n_estimators'],\n",
        "    max_depth=grid_search.best_params_['max_depth'],\n",
        "    min_samples_split=grid_search.best_params_['min_samples_split'],\n",
        "    random_state=42\n",
        ")\n",
        "rf_optimized.fit(X_train, y_train)\n",
        "\n",
        "# Función para extrapolación de indicadores\n",
        "def extrapolate_indicators(data, country, indicators, target_year):\n",
        "    extrapolated_values = []\n",
        "    for indicator in indicators:\n",
        "        country_data = data[data['Pais'] == country]\n",
        "        X = country_data['Anio'].values.reshape(-1, 1)\n",
        "        y = country_data[indicator].values\n",
        "\n",
        "        model = LinearRegression()\n",
        "        model.fit(X, y)\n",
        "\n",
        "        predicted_value = model.predict([[target_year]])[0]\n",
        "        extrapolated_values.append(predicted_value)\n",
        "\n",
        "    return np.array(extrapolated_values)\n",
        "\n",
        "# Función para predecir esperanza de vida\n",
        "def predict_life_expectancy(country, year, model, data_original, scaler, pca, indicators):\n",
        "    extrapolated_values = extrapolate_indicators(data_original, country, indicators, year)\n",
        "\n",
        "    # Aplicar las transformaciones a los valores extrapolados\n",
        "    scaled_values = scaler.transform([extrapolated_values])\n",
        "    pca_values = pca.transform(scaled_values)\n",
        "\n",
        "    # Realizar la predicción\n",
        "    predicted_life_expectancy = model.predict(pca_values)[0]\n",
        "    return predicted_life_expectancy\n",
        "\n",
        "    #¿Qué país tiene la esperanza de vida más alta para el 2040?\n",
        "#Año de interés\n",
        "year_of_interest = 2040\n",
        "\n",
        "# Diccionario para almacenar las predicciones de esperanza de vida para todos los países en 2040\n",
        "predictions_2040 = {}\n",
        "\n",
        "# Iterar sobre todos los países y obtener las predicciones\n",
        "for country in all_countries:\n",
        "    predicted_life_expectancy = predict_life_expectancy(country, year_of_interest, rf_optimized, data_original, scaler, pca, indicators)\n",
        "    predictions_2040[country] = predicted_life_expectancy\n",
        "\n",
        "# Encontrar el país con la esperanza de vida más alta en 2040\n",
        "country_with_highest_life_expectancy = max(predictions_2040, key=predictions_2040.get)\n",
        "highest_life_expectancy = predictions_2040[country_with_highest_life_expectancy]\n",
        "\n",
        "print(f\"El país con la esperanza de vida más alta en {year_of_interest} es {country_with_highest_life_expectancy} con una esperanza de vida de {highest_life_expectancy} años.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jt6BtJWnvpfK",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1701272803964,
          "user_tz": 180,
          "elapsed": 51093,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "c219116b-ded8-4761-e394-47173c8e9345"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest MSE: 0.5303251167089678\n",
            "Random Forest R2: 0.9606226069858075\n",
            "Red Neuronal MSE: 2413.1394881568735\n",
            "Red Neuronal R2: -178.17903382156325\n",
            "Regresión Lineal MSE: 0.44343721792979296\n",
            "Regresión Lineal R2: 0.9670741568570208\n",
            "Fitting 5 folds for each of 27 candidates, totalling 135 fits\n",
            "El país con la esperanza de vida más alta en 2040 es Canada con una esperanza de vida de 81.29183414770006 años.\n"
          ]
        }
      ]
    }
  ]
}